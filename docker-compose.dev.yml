networks:
  app-tier:
    driver: bridge

services:
  redis:
    image: redis:7.0-alpine
    container_name: redis
    networks:
      - app-tier
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD SHELL", "redis-cli ping | grep PONG"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  api-gateway:
    depends_on:
      redis:
        condition: service_healthy
    container_name: api-gateway
    env_file:
      - ./api-gateway/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
  # authentication
  authentication:
    depends_on:
      redis:
        condition: service_healthy
    container_name: authentication
    env_file:
      - ./authentication/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://auth:4001/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./authentication
      dockerfile: Dockerfile
  # audit
  audit:
    depends_on:
      redis:
        condition: service_healthy
    container_name: audit
    env_file:
      - ./audit/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://audit:4003/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./audit
      dockerfile: Dockerfile
  # products
  products:
    depends_on:
      redis:
        condition: service_healthy
    container_name: products
    env_file:
      - ./products/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://products:4003/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./products
      dockerfile: Dockerfile

      # payment
  payment:
    depends_on:
      redis:
        condition: service_healthy
    container_name: payment
    env_file:
      - ./payment/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://payment:4004/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./payment
      dockerfile: Dockerfile
  # categories
  categories:
    depends_on:
      redis:
        condition: service_healthy
    container_name: categories
    env_file:
      - ./categories/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://categories:4005/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./categories
      dockerfile: Dockerfile
  # notification
  notification:
    depends_on:
      redis:
        condition: service_healthy
    container_name: notification
    env_file:
      - ./notification/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://notification:4006/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./notification
      dockerfile: Dockerfile
  # stores
  stores:
    depends_on:
      redis:
        condition: service_healthy
    container_name: stores
    env_file:
      - ./stores/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://stores:4007/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./stores
      dockerfile: Dockerfile
  # cart
  cart:
    depends_on:
      redis:
        condition: service_healthy
    container_name: cart
    env_file:
      - ./cart/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://cart:4009/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./cart
      dockerfile: Dockerfile
  tenant:
    depends_on:
      redis:
        condition: service_healthy
    container_name: tenant
    env_file:
      - ./tenant/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://tenant:4010/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./tenant
      dockerfile: Dockerfile

  review:
    depends_on:
      redis:
        condition: service_healthy
    container_name: review
    env_file:
      - ./review/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://review:4011/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./review
      dockerfile: Dockerfile
  
  orders:
    depends_on:
      redis:
        condition: service_healthy
    container_name: orders
    env_file:
      - ./orders/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://orders:4012/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./orders
      dockerfile: Dockerfile
  color:
    depends_on:
      redis:
        condition: service_healthy
    container_name: color
    env_file:
      - ./color/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://color:4013/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./color
      dockerfile: Dockerfile
  view:
    depends_on:
      redis:
        condition: service_healthy
    container_name: view
    env_file:
      - ./view/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://view:4014/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    build:
      context: ./view
      dockerfile: Dockerfile

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom_data:/prometheus
    networks:
      - app-tier
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./etc/loki/loki-config.yml:/etc/loki/loki-config.yml
    command: -config.file=/etc/loki/loki-config.yml -config.expand-env=true
    networks:
      - app-tier
  promtail:
    image: grafana/promtail:latest
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - app-tier
    volumes:
      # Mount Docker socket to read container logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./etc/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      # Mount log directories
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./audit:/app/audit
      - ./products:/app/products
      - ./auth:/app/auth
      - ./payment:/app/payment
      - ./categories:/app/categories
      - ./stores:/app/stores
      - ./cart:/app/cart
      - ./tenant:/app/tenant
      - ./review:/app/review
      - ./orders:/app/orders
      - ./color:/app/color
      - ./view:/app/view
      - ./notification:/app/notification
      - ./api-gateway:/app/api-gateway

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana
    networks:
      - app-tier
volumes:
  prom_data:
  redis-data:
  grafana_data:
  loki_data: